generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Assistance {
  id                                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  eventId                           String    @db.Uuid
  userId                            String    @db.Uuid
  attended                          Boolean   @default(false)
  attendedDate                      DateTime? @db.Timestamp(6)
  events_assistance_eventIdToevents Event     @relation("assistance_eventIdToevents", fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  events_assistance_userIdToevents  Event     @relation("assistance_userIdToevents", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("assistance")
}

model Event {
  id                                    String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  groupId                               String       @db.Uuid
  title                                 String       @db.VarChar(255)
  description                           String       @db.VarChar(255)
  startDate                             DateTime     @default(now()) @db.Timestamp(6)
  endDate                               DateTime?    @db.Timestamp(6)
  assistance_assistance_eventIdToevents Assistance[] @relation("assistance_eventIdToevents")
  assistance_assistance_userIdToevents  Assistance[] @relation("assistance_userIdToevents")
  groups                                Group        @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("events")
}

model Group {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String   @db.VarChar(255)
  description String   @db.VarChar(255)
  createdBy   String   @db.Uuid
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  events      Event[]
  users       User     @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  members     Member[]

  @@map("groups")
}

model Member {
  id       String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  groupId  String   @db.Uuid
  userId   String   @db.Uuid
  joinedAt DateTime @default(now()) @db.Timestamp(6)
  groups   Group    @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users    User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("members")
}

model User {
  id       String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username String   @unique @db.VarChar(255)
  email    String   @unique @db.VarChar(255)
  password String   @db.VarChar(255)
  imageUrl String?  @db.VarChar(255)
  groups   Group[]
  members  Member[]

  @@map("users")
}
